{"version":3,"file":"static/js/619.25a09bad.chunk.js","mappings":"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","sources":["components/BasicComponents/BaseForm.jsx","helpers/firstLetter.js","components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContsctList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/SkeletonCustom/SkeletonCastom.js","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Box } from '@mui/system';\n\nconst StyledBox = styled(Box)`\n  margin: 20px auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 400px;\n`;\n\nexport const BaseForm = ({ handleSubmit, children }) => {\n  return (\n    <StyledBox\n      component=\"form\"\n      noValidate\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n    >\n      {children}\n    </StyledBox>\n  );\n};\n","  \nexport const toUpperCaseMaker = (str) => {\n    let words = str.split(' ');\n    let capitalizedWords = [];\n    for (let i = 0; i < words.length; i++) {\n      capitalizedWords.push(words[i].charAt(0).toUpperCase() + words[i].slice(1));\n    }\n    return capitalizedWords.join(' ');\n  }\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\nwidth: 400px;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\ngap: 5px;\nmargin: 0 auto;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilters = state => state.filters.name;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filterName) => {\n    const visibleContacts = [...contacts].filter(({ name }) =>\n      name.toLowerCase().includes(filterName.toLowerCase())\n    );\n    return visibleContacts;\n  }\n);","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  Avatar,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport styled from '@emotion/styled';\nimport { toUpperCaseMaker } from 'helpers/firstLetter';\n\nexport const ListItemCustom = styled(ListItem)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 350px;\n`;\n\n\n\nexport const ContactItem = ({ id, name, number }) => {\n  const upperName = toUpperCaseMaker(name);\n  const dispatch = useDispatch();\n  const handleDelete = () =>\n    dispatch(deleteContact(id)).then(console.log(`Contact ${upperName} was delete`));\n  return (\n    <ListItemCustom>\n      <ListItemAvatar>\n        <Avatar alt={upperName} src=\"/static/images/avatar/1.jpg\" />\n      </ListItemAvatar>\n      <ListItemText\n        primary={upperName }\n        secondary={\n          <Typography\n            sx={{ display: 'inline' }}\n            component=\"span\"\n            variant=\"body2\"\n            color=\"text.primary\"\n          >\n            {number}\n          </Typography>\n        }\n      />\n      <IconButton aria-label=\"delete\" type=\"button\" onClick={handleDelete}>\n        <DeleteIcon />\n      </IconButton>\n    </ListItemCustom>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { ContactListStyled } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\n\n\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactListStyled>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem key={id} name={name} number={number} id={id}></ContactItem>\n      ))}\n    </ContactListStyled>\n  );\n};\n","import styled from 'styled-components';\n// import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormStyled = styled(Form)`\nwidth: 300px;\n display: flex;\n justify-content: center;\ngap: 35px;\n  flex-direction: column;\nmargin: 30px auto;\n\n`;\n\nexport const Label = styled.label`\n display: flex;\n align-items: center;\n gap: 10px;\ncolor: ${p => p.theme.colors.primary};\ntransition: color 250ms linear;\n&:hover, :focus {\n  color: ${p => p.theme.colors.accent};\n}\n\n`;\n\nexport const Input = styled(Field)`\ndisplay: inline-block;\npadding: ${p => p.theme.space[3]}px;\nwidth: 300px;\ncolor: ${p => p.theme.colors.primary};\nborder: none;\nborder-bottom: 1px solid ${p => p.theme.colors.primary};\noutline: none;\n\n/* border-radius: ${p => p.theme.radii.medium}; */\nfont-size: ${p => p.theme.fontSizes[6]};\ntransition: border 250ms linear;\ntext-transform: capitalize;\n&:first-letter {\n    text-transform: uppercase;\n}\n&:hover, :focus ,:focus-visible{\n    outline: none;\n    border-bottom: 1px solid ${p => p.theme.colors.accent};\n}\n&::placeholder{\n  color: ${p => p.theme.colors.secondary};\n}\n`;\n\nexport const ErrorMsgName = styled(ErrorMessage)`\nposition: absolute;\ntop: 103px;\nleft: 83px;\ncolor: ${p => p.theme.colors.warning};\nfont-size: ${p => p.theme.fontSizes[6]};\n\n\n`;\n\nexport const ErrorMsgPhone = styled(ErrorMessage)`\nposition: absolute;\ntop: 176px;\nleft: 17px;\ncolor: ${p => p.theme.colors.warning};\nfont-size: ${p => p.theme.fontSizes[6]};\n`;\nexport const FormBtn = styled.button`\nwidth: 130px;\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\ncolor: ${p => p.theme.colors.primary};\n  background-color: transparent;\n  padding: ${p => p.theme.space[3]}px;\n  /* border: 2px solid ${p => p.theme.colors.primary}; */\n  border: ${p => p.theme.borders.none};\n  border-radius: ${p => p.theme.radii.medium};\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover,\n  &:focus{\n    cursor: pointer;\n    background-color: ${p => p.theme.colors.accent};\n    color: ${p => p.theme.colors.text};\n    border: ${p => p.theme.borders.none};\n    outline: none;\n  }\n`;","\nimport { Formik } from 'formik';\nimport {\n  ErrorMsgName,\n  ErrorMsgPhone,\n  FormStyled,\n  Input,\n  Label,\n} from './ContactForm.styled';\nimport { BsTelephoneForwardFill, BsPersonSquare } from 'react-icons/bs';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Fab } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport { toast } from 'react-hot-toast';\n\nconst valName = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nexport const ContactForm = () => {\n  const startValues = {\n    name: '',\n    number: '',\n  };\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(2, 'Too Short!')\n      .max(25, 'Too Long!')\n      .matches(\n        valName,\n        'Name may contain only letters, apostrophe, dash and spaces'\n      )\n      .required(),\n    number: yup.string().phone('UA').required(),\n  });\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const addNewContact = ({ name, number }) => {\n    contacts.find(contact => contact.name === name)\n      ? toast(`${name} is already in contacts`, { icon: '⚠️' })\n      : dispatch(addContact({ name, number })).then(\n          toast(`Contact ${name} was added`, {\n            icon: '👏',\n          })\n        );\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    addNewContact(value);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={startValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled>\n        <Label htmlFor=\"name\">\n          <BsPersonSquare size=\"20\" />\n          <Input type=\"text\" name=\"name\" placeholder=\"Name\" autocomplite=\"on\" />\n          <ErrorMsgName name=\"name\" component=\"div\" />\n        </Label>\n\n        <Label htmlFor=\"tel\">\n          <BsTelephoneForwardFill size=\"20\" />\n          <Input type=\"tel\" name=\"number\" placeholder=\"Phone\" />\n          <ErrorMsgPhone name=\"number\" component=\"span\" />\n        </Label>\n\n        <Fab type=\"submit\" color=\"primary\" aria-label=\"add\">\n          <AddIcon />\n        </Fab>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FilterForm = styled(Form) `\nwidth: 300px;\n display: flex;\n justify-content: center;\ngap: 35px;\n  flex-direction: column;\nmargin: 30px auto;\n`;\n\nexport const FilterLabel = styled.label`\ncolor: ${p => p.theme.colors.primary};\ndisplay: flex;\nalign-items: center;\ngap: 10px;\ntransition: color 250ms linear;\n&:hover, :focus {\n    color: ${p => p.theme.colors.accent};\n}\n`;\n\nexport const FilterInput = styled(Field)`\ndisplay: inline-block;\npadding: ${p => p.theme.space[3]}px;\nwidth: 300px;\ncolor: ${p => p.theme.colors.primary};\nborder: none;\nborder-bottom: 1px solid ${p => p.theme.colors.primary};\noutline: none;\n\n/* border-radius: ${p => p.theme.radii.medium}; */\nfont-size: ${p => p.theme.fontSizes[6]};\ntransition: border 250ms linear;\ntext-transform: capitalize;\n&:first-letter {\n    text-transform: uppercase;\n}\n&:hover, :focus ,:focus-visible{\n    outline: none;\n    border-bottom: 1px solid ${p => p.theme.colors.accent};\n}\n&::placeholder{\n  color: ${p => p.theme.colors.secondary};\n}\n\n`\n","import { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport { MdPersonSearch } from 'react-icons/md';\nimport { FilterForm, FilterInput, FilterLabel } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nimport { selectFilters } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filterId = nanoid();\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilters);\n\n  return (\n    <Formik>\n      <FilterForm>\n        <FilterLabel htmlFor={filterId}>\n          <MdPersonSearch size=\"25\" />\n          <FilterInput\n            id={filterId}\n            type=\"text\"\n            value={filter}\n            onChange={({ currentTarget: { value } })=> dispatch(setFilter (value))}\n          />\n        </FilterLabel>\n      </FilterForm>\n    </Formik>\n  );\n};","import Skeleton from '@mui/material/Skeleton';\n\nexport const SkeletonContactList = () => {\n  return (\n    <>\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n            <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n      <Skeleton\n        animation=\"wave\"\n        height={20}\n        width=\"100%\"\n        style={{ marginBottom: 6 }}\n      />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContsctList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { BaseForm } from 'components/BasicComponents/BaseForm';\nimport { SkeletonContactList } from 'components/SkeletonCustom/SkeletonCastom';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <BaseForm>{isLoading && <SkeletonContactList />}</BaseForm>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["StyledBox","styled","Box","BaseForm","handleSubmit","children","component","noValidate","onSubmit","autoComplete","toUpperCaseMaker","str","words","split","capitalizedWords","i","length","push","charAt","toUpperCase","slice","join","ContactListStyled","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilters","filters","name","selectVisibleContacts","createSelector","filterName","filter","toLowerCase","includes","ListItemCustom","ListItem","ContactItem","id","number","upperName","dispatch","useDispatch","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Typography","sx","display","variant","color","IconButton","type","onClick","deleteContact","then","console","log","Delete","ContactList","useSelector","map","FormStyled","Form","Label","p","theme","colors","accent","Input","Field","space","radii","medium","fontSizes","ErrorMsgName","ErrorMessage","warning","ErrorMsgPhone","borders","none","text","valName","ContactForm","schema","yup","shape","min","max","matches","required","phone","initialValues","validationSchema","value","resetForm","find","contact","toast","icon","addContact","addNewContact","htmlFor","size","placeholder","autocomplite","Fab","Add","FilterForm","FilterLabel","FilterInput","Filter","filterId","nanoid","onChange","currentTarget","setFilter","SkeletonContactList","Skeleton","animation","height","width","style","marginBottom","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}
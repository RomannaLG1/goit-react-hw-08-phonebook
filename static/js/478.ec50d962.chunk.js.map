{"version":3,"file":"static/js/478.ec50d962.chunk.js","mappings":"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","sources":["components/BasicComponents/BaseForm.jsx","components/BasicComponents/InputForm.jsx","components/BasicComponents/PasswordInput.jsx","helpers/firstLetter.js","components/RegisterForm/RegisterForm.js","helpers/validation.js","pages/Register.js","../node_modules/@mui/icons-material/HowToReg.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Box } from '@mui/system';\n\nconst StyledBox = styled(Box)`\n  margin: 20px auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 400px;\n`;\n\nexport const BaseForm = ({ handleSubmit, children }) => {\n  return (\n    <StyledBox\n      component=\"form\"\n      noValidate\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n    >\n      {children}\n    </StyledBox>\n  );\n};\n","import { FormControl, Input, InputLabel } from '@mui/material';\nimport { toUpperCaseMaker } from 'helpers/firstLetter';\n\nexport const InputForm = ({ name }) => {\n    \n  return (\n    <FormControl fullWidth sx={{ m: 3 }} variant=\"standard\">\n      <InputLabel htmlFor={`standard-adornment-${name}`}>{toUpperCaseMaker(name)}</InputLabel>\n      <Input name={name} type={name} required minLength=\"4\"/>\n    </FormControl>\n  );\n};\n","import { Visibility, VisibilityOff } from '@mui/icons-material';\nimport {\n  FormControl,\n  IconButton,\n  Input,\n  InputAdornment,\n  InputLabel,\n} from '@mui/material';\nimport { useState } from 'react';\n\nexport const PasswordInput = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return (\n    <FormControl sx={{ m: 4, width: '46.5ch' }} variant=\"standard\">\n      <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\n      <Input\n        name=\"password\"\n        id=\"standard-adornment-password\"\n        type={showPassword ? 'text' : 'password'}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleClickShowPassword}\n              onMouseDown={handleMouseDownPassword}\n            >\n              {showPassword ? <VisibilityOff /> : <Visibility />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </FormControl>\n  );\n};\n","  \nexport const toUpperCaseMaker = (str) => {\n    let words = str.split(' ');\n    let capitalizedWords = [];\n    for (let i = 0; i < words.length; i++) {\n      capitalizedWords.push(words[i].charAt(0).toUpperCase() + words[i].slice(1));\n    }\n    return capitalizedWords.join(' ');\n  }\n","import { Button } from '@mui/material';\nimport HowToRegIcon from '@mui/icons-material/HowToReg';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { PasswordInput } from 'components/BasicComponents/PasswordInput';\nimport { InputForm } from 'components/BasicComponents/InputForm';\nimport { BaseForm } from 'components/BasicComponents/BaseForm';\nimport { validateRegisterForm } from 'helpers/validation';\n\n\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    if (validateRegisterForm(form.elements.name.value, form.elements.email.value, form.elements.password.value)) {\n     \n      dispatch(\n        register({\n          name: form.elements.name.value,\n          email: form.elements.email.value,\n          password: form.elements.password.value,\n        })\n      )\n      form.reset();\n    } \n    \n  };\n\n  return (\n\n      <BaseForm handleSubmit={handleSubmit}>\n        <InputForm name=\"name\" />\n        <InputForm name=\"email\" />\n        <PasswordInput />\n        <Button type=\"submit\" variant=\"contained\" startIcon={<HowToRegIcon />}>\n          Register\n        </Button>\n      </BaseForm>\n \n  );\n};\n","import { toast } from \"react-hot-toast\";\n\nexport const validateRegisterForm = (name, email, password) => {\n    if (!name || !email || !password) {\n        toast.error(\"This didn't work.\")\n      return false;\n    }\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n        toast.error(\"Please, enter valid e-mail\")\n      return false;\n    }\n    if (password.length < 8) {\n        toast.error(\"Please, enter valid password\")\n      return false;\n    }\n    return true;\n  };","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"m9 17 3-2.94c-.39-.04-.68-.06-1-.06-2.67 0-8 1.34-8 4v2h9l-3-3zm2-5c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4m4.47 8.5L12 17l1.4-1.41 2.07 2.08 5.13-5.17 1.4 1.41z\"\n}), 'HowToReg');\nexports.default = _default;"],"names":["StyledBox","styled","Box","BaseForm","handleSubmit","children","component","noValidate","onSubmit","autoComplete","InputForm","name","fullWidth","sx","m","variant","htmlFor","toUpperCaseMaker","type","required","minLength","PasswordInput","useState","showPassword","setShowPassword","width","id","endAdornment","position","onClick","show","onMouseDown","event","preventDefault","str","words","split","capitalizedWords","i","length","push","charAt","toUpperCase","slice","join","RegisterForm","dispatch","useDispatch","e","email","password","form","currentTarget","elements","value","test","toast","register","reset","Button","startIcon","HowToReg","Register","Helmet","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","fillRule","d"],"sourceRoot":""}